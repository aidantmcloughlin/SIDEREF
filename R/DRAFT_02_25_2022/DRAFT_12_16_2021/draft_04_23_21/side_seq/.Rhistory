library(tidyverse)
library(janitor)
library(data.table)
library(here)
library(readxl)
library(magrittr)
library(forcats)
library(GGally)
library(ggpubr)
## BioConductor packages
library(Seurat)
library(Signac)
## Statistics
library(Hmisc)
library(diffusr)
`%p%` <- function(x, y) paste0(x, y)
## SideSEQ implementation packages
library(utils)
library(parallel)
library(bigmemory)
## Data cleaning, plotting
library(tidyverse)
library(janitor)
library(data.table)
library(here)
library(readxl)
library(magrittr)
library(forcats)
library(GGally)
library(ggpubr)
## BioConductor packages
library(Seurat)
library(Signac)
## Statistics
library(Hmisc)
library(diffusr)
source(here('R/side_seq/side_seq.R'))
source(here('R/side_seq/side_seq_iter.R'))
source(here('R/side_seq/random_sampling_methods.R'))
load(here("data/share_seq/brain/brain.rda"))
## Access normalized count data
umi_counts_norm <-
as.matrix(brain@assays$SCT@data) %>%
as.data.frame()
library(tidyverse)
library(Seurat)
## Access normalized count data
umi_counts_norm <-
as.matrix(brain@assays$SCT@data) %>%
as.data.frame()
View(umi_counts_norm)
GENE_PCTILE_CUTOFF <- 0.80
umi_counts_norm$mean_express <-
apply(umi_counts_norm, 1, mean)
umi_counts_high_expr <-
umi_counts_norm %>%
dplyr::filter(mean_express >= quantile(umi_counts_norm$mean_express, GENE_PCTILE_CUTOFF))
expr_matrix <- umi_counts_high_expr[,1:25]
View(expr_matrix)
p1 <- DimPlot(brain,
reduction = "umap.rna",
group.by = "seurat_clusters", label = TRUE,
label.size = 2.5, repel = TRUE) +
ggtitle("RNA")
p2 <- DimPlot(brain,
reduction = "umap.atac",
group.by = "seurat_clusters", label = TRUE,
label.size = 2.5, repel = TRUE) +
ggtitle("ATAC")
p3 <- DimPlot(brain,
reduction = "wnn.umap",
group.by = "seurat_clusters",
label = TRUE,
label.size = 2.5, repel = TRUE) +
ggtitle("WNN")
p4 <- DimPlot(brain,
reduction = "wnn.umap",
group.by = "celltype",
label = TRUE,
label.size = 2.5, repel = TRUE) +
ggtitle("WNN-celltypes")
p1 + p2 + p3 & NoLegend() &
theme(plot.title = element_text(hjust = 0.5))
## Solution code:
oesoph <- read_dta("data/oesoph.dta")
## Boolean as.numeric() solution:
oesoph <- mutate(oesoph, alc = as.numeric(alcgp >= 2))   # create new variable
## case_when() solution:
oesoph <- mutate(oesoph,
alc = case_when(alcgp >= 2 ~ 1,
alcgp <  2 ~ 0))   # create new variable
table(oesoph$alc, oesoph$alcgp, dnn = c("alc", "alcgp"))        # tabulate against original
oesoph.agg <- aggregate(oesoph,
by = list(oesoph$casestatus, oesoph$alc),
FUN = sum)
alc.by.case <- epitable(oesoph.agg$freq)
setwd("C:/Users/aidan/OneDrive/Desktop/r_and_w/gsi/ph241_sp_2021/ph241-dev/Assignments/A04")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: table
library(dplyr)
library(readr)
library(knitr)
library(epitools)
library(foreign)
library(haven)
oral_cancer <- read_csv("data/oral_cancer.csv")
kable(oral_cancer, caption = 'Oral Cancer')
# Chunk 3: 1c-sol
## Solution code:
qnorm(.95)
# Chunk 4: 1i-sol
## Solution code:
epitab(c(16, 24, 8, 32), conf.level = 0.90, oddsratio = "fisher")
## Solution code:
oesoph <- read_dta("data/oesoph.dta")
## Boolean as.numeric() solution:
oesoph <- mutate(oesoph, alc = as.numeric(alcgp >= 2))   # create new variable
## case_when() solution:
oesoph <- mutate(oesoph,
alc = case_when(alcgp >= 2 ~ 1,
alcgp <  2 ~ 0))   # create new variable
table(oesoph$alc, oesoph$alcgp, dnn = c("alc", "alcgp"))        # tabulate against original
oesoph.agg <- aggregate(oesoph,
by = list(oesoph$casestatus, oesoph$alc),
FUN = sum)
alc.by.case <- epitable(oesoph.agg$freq)
alc.by.case
oesoph.agg
check <- oesoph %>% group_by(casestatus,alc) %>% summarize(sum(freq))
check
## Solution code:
altern <- epitab(oesoph$alc, oesoph$casestatus)
oesoph$casestatus
oesoph$alc
altern <- epitab(oesoph$alc, oesoph$casestatus)
## Solution code:
altern <- epitable(oesoph$alc, oesoph$casestatus)
## Solution code:
altern <- epitable(oesoph$alc, oesoph$casestatus)
## Solution code:
epitable(oesoph$alc, oesoph$casestatus)
oesoph$casestatus
oesoph$alc
c(oesoph$casestatus)
## Solution code:
epitable(oesoph$alc, c(oesoph$casestatus))
## Solution code:
altern<-epitable(oesoph$alc, c(oesoph$casestatus))
epitab(altern)
setwd("C:/Users/aidan/OneDrive/Desktop/r_and_w/berkeley/haiyan/sc_multiome/R/side_seq")
