labs(x = "", y = "", fill = "Group-Wise\nDistance") +
ggtitle(title)
return(p)
}
plot_list <- vector(mode = "list")
## TODO: title lists.
i=1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_50_dist,
title = "SIDEREF (50 random) 50 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_150_dist,
title = "SIDEREF (50 random) 150 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_300_dist,
title = "SIDEREF (50 random) 300 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_3,
title = "PCA (3 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_25,
title = "PCA (25 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_75,
title = "PCA (75 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$euclid_dist,
title = "Euclidean")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pear_dist,
title = "Pearson")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$spearman_dist,
title = "Spearman")
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], plot_list[[9]],
ncol=3, nrow=3)
ggsave(here("output/figures/dist_heatmaps.png"),
width = 14, height = 9)
groupwiseDistanceHeatmap <- function(group_indices, dist_mat,
title = "") {
n_groups <- length(unique(group_indices))
distance_heatmap <-
data.frame(sapply(seq_len(n_groups),
function(g){computeGroupDists(g, group_indices, dist_mat)}))
names(distance_heatmap) <- "Group " %p% seq_len(n_groups)
distance_heatmap <- distance_heatmap %>%
mutate(group = "Group " %p% seq_len(n_groups))
## TODO: better solution variable naming
p <-
distance_heatmap %>%
gather(group2, dist, `Group 1`:`Group 6`) %>%
ggplot(aes(x=group2, y=group, fill=dist)) +
geom_tile() +
scale_fill_gradient2(low = "royalblue4", high = "orangered2", mid = "white",
midpoint = 0.5, limit = c(0,1)) +
labs(x = "", y = "", fill = "Group-Wise\nDistance") +
ggtitle(title)
return(p)
}
plot_list <- vector(mode = "list")
## TODO: title lists.
i=1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_50_dist,
title = "SIDEREF (50 random) 50 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_150_dist,
title = "SIDEREF (50 random) 150 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$side_ref_rand_300_dist,
title = "SIDEREF (50 random) 300 Top Genes")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_3,
title = "PCA (3 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_25,
title = "PCA (25 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pca_dist_75,
title = "PCA (75 PCs)")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$euclid_dist,
title = "Euclidean")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$pear_dist,
title = "Pearson")
i = i+1
plot_list[[i]] <-
groupwiseDistanceHeatmap(group_indices,
dist_mat = full_res$dist_list$spearman_dist,
title = "Spearman")
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], plot_list[[9]],
ncol=3, nrow=3)
ggsave(here("output/figures/dist_heatmaps.png"),
width = 14, height = 9)
rbo_p = NULL
n_top_genes = 50
selection_method = "random"
gamma = NULL
size_ref_set
size_ref_set=50
n_clust = 10
B = 3
B=1
D=1
purity_tol = 0.85
n_neighbors = 15
min_dist = 0.01
clust_repeats = 5
parallelize = TRUE
n_cores=4
verbose = TRUE
n_clust = 5
## set constants, parallel backend
J <- dim(expr_matrix)[1]
N <- dim(expr_matrix)[2]
expr_matrix = sim2_counts
J <- dim(expr_matrix)[1]
N <- dim(expr_matrix)[2]
SIDESeq_method <- "ref_set"
cell_pairs <- combn(N, 2)
if(parallelize == TRUE) {
cl <- makeCluster(n_cores)
}
## Set Differential Expression measure
if(diff_expr_method == "diff_expr_norm") {
diffExprMeasure <- function(i, j, expr_matrix) {
return(abs(expr_matrix[, i] - expr_matrix[, j]) /
sqrt(expr_matrix[, i] + expr_matrix[, j]))
}
}
diff_expr_method = "diff_expr_norm"
similarity_method = "n_intersect"
## Set Differential Expression measure
if(diff_expr_method == "diff_expr_norm") {
diffExprMeasure <- function(i, j, expr_matrix) {
return(abs(expr_matrix[, i] - expr_matrix[, j]) /
sqrt(expr_matrix[, i] + expr_matrix[, j]))
}
}
## Set Similarity measure
similarityMeasure <-
setSimilarityMeasure(similarity_method = similarity_method,
side_seq_method = SIDESeq_method,
rbo_p = rbo_p)
## Iterate procedure B times or until convergence criteria is reached
b <- 1
prior_mat <- NULL
dissim_matrix <- NULL
## storing the convergence criterion
purity_scores <- rep(0, B)
### Dissimilarity Matrix Computation Workflow:
computeDissim <- function() {
if(class(ref_cells) == "logical") {ref_cells <- which(ref_cells)}
## create ref set combn list
ref_set_pairs <-
matrix(c(rep(seq_len(N), length(ref_cells)),
sapply(ref_cells, rep, N)),
byrow = TRUE,
nrow  = 2)
## Compute Differential Expression Vector for each pair of cells
diff_expr_matrix <-
computeDiffExprMat(cell_pairs = ref_set_pairs,
expr_matrix = expr_matrix,
diff_expr_measure = diffExprMeasure,
n_top_genes = n_top_genes,
parallelize = parallelize,
cl = cl)
## Compute similarity scores
if(parallelize == TRUE) {
clusterExport(cl, varlist=c("diff_expr_matrix", "N",
"ref_cells",
"similarityMeasure", "rbo"),
envir=environment())
similarity_vec <-
parApply(cl = cl, X = cell_pairs, 2,
FUN = function(x) {
return(
similarityMeasure(i = x[1], j = x[2], N = N,
ref_set = ref_cells,
d_e_mat = diff_expr_matrix)
)})
} else{
similarity_vec <-
apply(cell_pairs, 2,
function(x) {
similarityMeasure(i = x[1], j = x[2], N = N,
ref_set = ref_cells,
d_e_mat = diff_expr_matrix)})
}
## dissimilarity measure is max score - similarity_score
dissimilarity_vec <- max(similarity_vec) - similarity_vec
## convert vector to cell-by-cell matrix
dissim_matrix <- matrix(0, nrow = N, ncol = N)
dissim_matrix[lower.tri(dissim_matrix)] <- dissimilarity_vec
dissim_matrix[upper.tri(dissim_matrix)] <-
t(dissim_matrix)[upper.tri(dissim_matrix)]
return(dissim_matrix)
}
B
B=0
### Run cluster convergence loop
while(b <= B & purity_scores[max(1, b-1)] < purity_tol) {
if(verbose == TRUE) {cat("Running convergence iteration", b, "of", B, "...")}
## extract reference set
ref_cells <-
selectRefSet(expr_matrix,
selection_method = selection_method,
size_ref_set = size_ref_set,
gamma = gamma,
dissim_matrix = dissim_matrix,
n_clust,
n_neighbors = n_neighbors,
min_dist = min_dist)
## compute dissim matrix
dissim_matrix <- computeDissim()
## compare to prior matrix
if(!is.null(prior_mat)) {
internal_purity_vec <- c()
for(r in seq_len(clust_repeats)) {
## UMAP embedding + Kmeans
umap_embed_current <-
uwot::umap(stats::as.dist(dissim_matrix),
n_neighbors = n_neighbors,
min_dist = min_dist)
umap_embed_prior <-
uwot::umap(stats::as.dist(prior_mat),
n_neighbors = n_neighbors,
min_dist = min_dist)
clust_res_current <- kmeanspp(umap_embed_current, k = n_clust)$cluster
clust_res_prior   <- kmeanspp(umap_embed_prior,   k = n_clust)$cluster
## storing purity of current cluster with previous clustering:
internal_purity_vec[r] <-
clusterPurity(clust_res_current,
clust_res_prior)
}
purity_scores[b] <- mean(internal_purity_vec)
if(verbose == TRUE){cat("Current clustering purity score", purity_scores[b])}
}
## update prior
prior_mat <- dissim_matrix
## end of while loop
b <- b + 1
}
dissim_final <- NULL
## Run final averaging loop
ref_cell_list <-
lapply(seq_len(D),
function(d) {
return(selectRefSet(expr_matrix,
selection_method = selection_method,
size_ref_set = size_ref_set,
gamma = gamma,
dissim_matrix = dissim_matrix,
n_clust,
n_neighbors = n_neighbors,
min_dist = min_dist))
})
## clear space
rm(prior_mat,dissim_matrix)
if(class(ref_cells) == "logical") {ref_cells <- which(ref_cells)}
## create ref set combn list
ref_set_pairs <-
matrix(c(rep(seq_len(N), length(ref_cells)),
sapply(ref_cells, rep, N)),
byrow = TRUE,
nrow  = 2)
## Compute Differential Expression Vector for each pair of cells
diff_expr_matrix <-
computeDiffExprMat(cell_pairs = ref_set_pairs,
expr_matrix = expr_matrix,
diff_expr_measure = diffExprMeasure,
n_top_genes = n_top_genes,
parallelize = parallelize,
cl = cl)
similarity_method
side_seq_method
SIDESeq_method
side_seq_method = SIDESeq_method
rbo_p
rbo_p = rbo_p
similarity_method
side_seq_method
similarityMeasure
t
t=2
ref_set
ref_set
N
i=1
j=3
inter <- base::intersect(
d_e_mat[, ((t-1) * N + i)],
d_e_mat[, ((t-1) * N + j)])
d_e_mat = diff_expr_matrix
inter <- base::intersect(
d_e_mat[, ((t-1) * N + i)],
d_e_mat[, ((t-1) * N + j)])
inter
J
gene_list = 1:J
gene_list
gene_contribs <- rep(0, n_genes)
n_genes=J
n_genes
gene_contribs[inter] = gene_contribs[inter] + 1
gene_contribs <- rep(0, n_genes)
gene_contribs[inter] = gene_contribs[inter] + 1
ref_set
n_top_contribs = 20
ref_set = ref_cells
gene_contribs <- rep(0, n_genes)
sim_score <-
mean(sapply(seq_len(length(ref_set)),
function(t) {
if(ref_set[t] %in% c(i,j)){
return(NA)
} else{
inter <- base::intersect(
d_e_mat[, ((t-1) * N + i)],
d_e_mat[, ((t-1) * N + j)])
gene_contribs[inter] = gene_contribs[inter] + 1
return(length(inter))}
}),
na.rm = TRUE)
gene_contribs <-
order(gene_contribs, decreasing = TRUE)[1:n_top_contribs]
gene_contribs
gene_contribs <- rep(0, n_genes)
sim_score <-
mean(sapply(seq_len(length(ref_set)),
function(t) {
if(ref_set[t] %in% c(i,j)){
return(NA)
} else{
inter <- base::intersect(
d_e_mat[, ((t-1) * N + i)],
d_e_mat[, ((t-1) * N + j)])
gene_contribs[inter] = gene_contribs[inter] + 1
return(length(inter))}
}),
na.rm = TRUE)
sim_score
gene_contribs
max(gene_contribs)
inter
sapply(seq_len(length(ref_set)),
function(t) {
if(ref_set[t] %in% c(i,j)){
return(NA)
} else{
inter <- base::intersect(
d_e_mat[, ((t-1) * N + i)],
d_e_mat[, ((t-1) * N + j)])
gene_contribs[inter] <- gene_contribs[inter] + 1
return(length(inter))}
})
length(ref_set)
ref_set
inter
ggarrange(plot_list[[1]], plot_list[[2]], plot_list[[3]],
plot_list[[4]], plot_list[[5]], plot_list[[6]],
plot_list[[7]], plot_list[[8]], plot_list[[9]],
ncol=3, nrow=3)
ggsave(here("output/figures/dist_heatmaps.png"),
width = 15.5, height = 9)
diff_probs <- c(0, .01, .03, .06, .06,.04)
(diff_probs - min(diff_probs) / max(diff_probs) - min(diff_probs))
(diff_probs - min(diff_probs) / (max(diff_probs) - min(diff_probs))
(diff_probs - min(diff_probs)) / (max(diff_probs) - min(diff_probs))
library(here)
DATA_URLS = c(
"https://figshare.com/ndownloader/files/13088531")
here()
DATA_URLS = c(
"https://figshare.com/ndownloader/files/13088531")
for(d in DATA_URLS) {
for(d in DATA_URLS) { download.file(d, here("data/tab_muris_sc/seurat/"))}
?download.file
for(d in DATA_URLS) {
download.file(d, here("data/tab_muris_sc/seurat/droplet_Bladder_seurat_tiss.Robj"))
}
options(timeout=500)
for(d in DATA_URLS) {
download.file(d, here("data/tab_muris_sc/seurat/droplet_Bladder_seurat_tiss.Robj"))
}
SAVE_LOC <- "data/tab_muris_sc/seurat/"
SAVE_LOC <- here("data/tab_muris_sc/seurat/")
### URLs of file locations:
DATA_URLS <- c(
"https://figshare.com/ndownloader/files/13088531",
"https://figshare.com/ndownloader/files/13088642",
"https://figshare.com/ndownloader/files/13088849",
"https://figshare.com/ndownloader/files/13089194",
"https://figshare.com/ndownloader/files/13089197",
"https://figshare.com/ndownloader/files/13089323",
"https://figshare.com/ndownloader/files/13089629",
"https://figshare.com/ndownloader/files/13089821",
"https://figshare.com/ndownloader/files/13090478",
"https://figshare.com/ndownloader/files/13090580",
"https://figshare.com/ndownloader/files/13090877",
"https://figshare.com/ndownloader/files/13091135"
)
### Corresponding file names:
FILE_NAMES <- c(
"droplet_Bladder_seurat_tiss.Robj",
"droplet_Heart_and_Aorta_seurat_tiss.Robj",
"droplet_Kidney_seurat_tiss.Robj",
"droplet_Limb_Muscle_seurat_tiss.Robj",
"droplet_Liver_seurat_tiss.Robj",
"droplet_Lung_seurat_tiss.Robj",
"droplet_Mammary_Gland_seurat_tiss.Robj",
"droplet_Marrow_seurat_tiss.Robj",
"droplet_Spleen_seurat_tiss.Robj",
"droplet_Thymus_seurat_tiss.Robj",
"droplet_Tongue_seurat_tiss.Robj",
"droplet_Trachea_seurat_tiss.Robj",
)
### Corresponding file names:
FILE_NAMES <- c(
"droplet_Bladder_seurat_tiss.Robj",
"droplet_Heart_and_Aorta_seurat_tiss.Robj",
"droplet_Kidney_seurat_tiss.Robj",
"droplet_Limb_Muscle_seurat_tiss.Robj",
"droplet_Liver_seurat_tiss.Robj",
"droplet_Lung_seurat_tiss.Robj",
"droplet_Mammary_Gland_seurat_tiss.Robj",
"droplet_Marrow_seurat_tiss.Robj",
"droplet_Spleen_seurat_tiss.Robj",
"droplet_Thymus_seurat_tiss.Robj",
"droplet_Tongue_seurat_tiss.Robj",
"droplet_Trachea_seurat_tiss.Robj"
)
### This script downloads the necessary Tabula Muris files to run SIDEREF analysis.
library(here)
SAVE_LOC <- here("data/tab_muris_sc/seurat/")
## If your computer is too slow, you may have to increase this value.
options(timeout=5000)
### URLs of file locations:
DATA_URLS <- c(
"https://figshare.com/ndownloader/files/13088531",
"https://figshare.com/ndownloader/files/13088642",
"https://figshare.com/ndownloader/files/13088849",
"https://figshare.com/ndownloader/files/13089194",
"https://figshare.com/ndownloader/files/13089197",
"https://figshare.com/ndownloader/files/13089323",
"https://figshare.com/ndownloader/files/13089629",
"https://figshare.com/ndownloader/files/13089821",
"https://figshare.com/ndownloader/files/13090478",
"https://figshare.com/ndownloader/files/13090580",
"https://figshare.com/ndownloader/files/13090877",
"https://figshare.com/ndownloader/files/13091135"
)
### Corresponding file names:
FILE_NAMES <- c(
"droplet_Bladder_seurat_tiss.Robj",
"droplet_Heart_and_Aorta_seurat_tiss.Robj",
"droplet_Kidney_seurat_tiss.Robj",
"droplet_Limb_Muscle_seurat_tiss.Robj",
"droplet_Liver_seurat_tiss.Robj",
"droplet_Lung_seurat_tiss.Robj",
"droplet_Mammary_Gland_seurat_tiss.Robj",
"droplet_Marrow_seurat_tiss.Robj",
"droplet_Spleen_seurat_tiss.Robj",
"droplet_Thymus_seurat_tiss.Robj",
"droplet_Tongue_seurat_tiss.Robj",
"droplet_Trachea_seurat_tiss.Robj"
)
for(d in seq_len(length(DATA_URLS))) {
download.file(DATA_URLS[d],
paste0(SAVE_LOC, FILE_NAMES[d]))
}
for(d in 7:length(DATA_URLS)) {
download.file(DATA_URLS[d],
paste0(SAVE_LOC, FILE_NAMES[d]))
}
