data_subset_seurat <-
CreateSeuratObject(data_subset, project = "SeuratProject", assay = "RNA")
### Getting the variable genes
data_subset_seurat <-
FindVariableFeatures(data_subset_seurat, nfeatures = n_variable_genes)
### Preprocessing the data
data_subset_seurat <-
NormalizeData(data_subset_seurat)
data_subset_seurat <-
ScaleData(data_subset_seurat)
data_subset_variable <- data_subset_seurat@assays$RNA@scale.data
### Confirm the dimensions look okay.
### Note: for several cell types, there are less cells than the subsample size.
dim(data_subset_variable)
## Now we will save the two objects as an RData that is available on the repo.
save(data_subset_variable, meta_data_subset,
file = here("output/tab_muris_sc/vignette_data/tm_sample.RData"))
source(here('R/relative_group_dist_comps.R'))
## Note: meta_data has a 'group_label' column containing cell type and tissue
## Note: meta_data column should have cells in the same order as the dist matrix.
### We may have an ordering that we prefer for the heatmap
group_labels <- as.character(meta_data_subset$group_label)
preset_levels <-
c(
unique(group_labels[grepl("Bladder Cell", group_labels)]),
unique(group_labels[grepl("Leukocyte", group_labels)]),
unique(group_labels[grepl("B Cell", group_labels)]),
unique(group_labels[grepl("Macrophage", group_labels)])
)
groupwiseDistanceHeatmap(
group_labels = group_labels,
dist_mat = sideref_res,
title = "",
do_hclust_axes = FALSE,
preset_levels = preset_levels,
do_numeric_x=TRUE,
do_numeric_y=FALSE
)
set.seed(1)
library(here)
source(here("R/libraries.R"))
source(here("R/bipartite_graphs.R"))
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Thymus",
node_size = 7.5,
text_size = 3,
s_t_size = 4,
title = "",
two_color_grad = TRUE,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Thymus",
node_size = 7.5,
text_size = 3,
s_t_size = 4,
title = "",
two_color_grad = FALSE,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Bladder",
node_size = 7.5,
text_size = 3,
s_t_size = 4,
title = "",
two_color_grad = FALSE,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Bladder",
node_size = 7.5,
text_size = 3,
s_t_size = 4,
title = "",
two_color_grad = TRUE,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Bladder",
node_size = 7.5,
text_size = 3,
s_t_size = 4,
title = "",
two_color_grad = FALSE,
legend_title = "Cell Type, Tissue")
SIDEREF <- function(expr_matrix,
n_top_genes = 300,
R = 100,
## cell reference set selection parameters
selection_method = "cell_embed_sample",
diff_expr_method = "diff_expr_norm",
similarity_method = "n_intersect",
n_pcs = NULL,
n_clust = NULL,
D = 1,
return_sim = FALSE,
n_neighbors = 15,
min_dist = 0.01,
pca_elbow_chg_thres = 0.025,
kmeans_elbow_chg_thres = 0.025,
## parallelization parameters
parallelize = TRUE,
n_cores = detectCores()-2,
## other
verbose = TRUE) {
#' Computes SIDEREF distance matrix between cells in scRNA seq array.
#' SIDEREF uses concordance of ranked differential expression gene lists
#' to measure dissimilarity between cells. A globally representative reference
#' set of cells forms the basis for the ranked DE gene lists.
#' @param expr_matrix Gene x Cell matrix of scRNA seq data.
#' @param n_top_genes Number of genes comprising each DE gene list.
#' @param R Size of cell reference set.
#' @param selection_method Whether to use random sampling or stratified sampling of k-means generated clusters to form the reference set.
#' @param n_pcs Number of PCs to use in PCA embedding for cluster stratified sampling of the reference set.
#' @param n_clust Number of clusters to use in K-means for cluster stratified sampling of the reference set.
#' @param D Number of runs of SIDEREF to average results over.
#' @param return_sim If true, returns the similarity matrix.
#' @param n_neighbors Number of neighbors parameter to use in UMAP embedding for cluster stratified sampling of the reference set.
#' @param min_dist Min distance parameter to use in UMAP embedding for cluster stratified sampling of the reference set.
#' @param pca_elbow_chg_thres Elbow criteria variance change threshold to use for adaptively selecting PCs
#' @param kmeans_elbow_chg_thres Elbow criteria variance change threshold to use for adaptively selecting number of clusters.
#' @param parallelize Whether to parallelize computations.
#' @param n_cores How many cores to use in the parallel computation.
#' @param verbose Whether to print status messages during SIDEREF computation.
#' @return dissim_final: a Cell x Cell SIDEREF dissimilarity (similarity, if specified) matrix.
## initializations:
dissim_final <- NULL
## set constants, parallel backend
J <- dim(expr_matrix)[1]
N <- dim(expr_matrix)[2]
similarity_idx_method <- "SIDEREF"
cell_pairs <- combn(N, 2)
if(parallelize == TRUE) {
cl <- makeCluster(n_cores)
if(verbose) {cat("Cores in usage: " %p% n_cores)}
}
## Set Differential Expression measure
if(diff_expr_method == "diff_expr_norm") {
diffExprMeasure <- function(i, j, expr_matrix) {
return(abs(expr_matrix[, i] - expr_matrix[, j]) /
sqrt(expr_matrix[, i] + expr_matrix[, j]))
}
}
## Set Similarity measure
similarityMeasure <-
setSimilarityMeasure(similarity_method = similarity_method,
index_method = similarity_idx_method)
### Dissimilarity Matrix Computation Workflow:
computeDissim <- function(return_sim = FALSE) {
if(class(ref_cells) == "logical") {ref_cells <- which(ref_cells)}
## create ref set combn list
ref_set_pairs <-
matrix(c(rep(seq_len(N), length(ref_cells)),
sapply(ref_cells, rep, N)),
byrow = TRUE,
nrow  = 2)
## Compute Differential Expression Vector for each pair of cells
diff_expr_matrix <-
computeDiffExprMat(cell_pairs = ref_set_pairs,
expr_matrix = expr_matrix,
diff_expr_measure = diffExprMeasure,
n_top_genes = n_top_genes,
parallelize = parallelize,
cl = cl)
## Compute similarity scores
if(parallelize == TRUE) {
clusterExport(cl, varlist=c("diff_expr_matrix", "N",
"ref_cells",
"similarityMeasure"),
envir=environment())
similarity_vec <-
parApply(cl = cl, X = cell_pairs, 2,
FUN = function(x) {
return(
similarityMeasure(i = x[1], j = x[2], N = N,
ref_set = ref_cells,
d_e_mat = diff_expr_matrix)
)})
} else{
similarity_vec <-
apply(cell_pairs, 2,
function(x) {
similarityMeasure(i = x[1], j = x[2], N = N,
ref_set = ref_cells,
d_e_mat = diff_expr_matrix)})
}
## dissimilarity measure is max score - similarity_score
if(return_sim == FALSE) {
mat_fill_vec <- max(similarity_vec) - similarity_vec
} else{mat_fill_vec = similarity_vec}
## convert vector to cell-by-cell matrix
fill_matrix <- matrix(0, nrow = N, ncol = N)
fill_matrix[lower.tri(fill_matrix)] <- mat_fill_vec
fill_matrix[upper.tri(fill_matrix)] <-
t(fill_matrix)[upper.tri(fill_matrix)]
return(fill_matrix)
}
## Get Reference Cells for each averaging iteration
ref_cell_list <-
lapply(seq_len(D),
function(d) {
return(selectRefSet(expr_matrix,
selection_method = selection_method,
R = R,
dissim_matrix = NULL,
n_pcs = n_pcs,
n_clust = n_clust,
n_neighbors = n_neighbors,
min_dist = min_dist,
pca_elbow_chg_thres = pca_elbow_chg_thres,
kmeans_elbow_chg_thres = kmeans_elbow_chg_thres
))
})
## Run averaging loop
for(d in seq_len(D)) {
if(verbose == TRUE) {cat("Running averaging iteration", d, "of", D, "...")}
ref_cells <- ref_cell_list[[d]]
dissim_curr <- computeDissim(return_sim = return_sim)
if(is.null(dissim_final)){dissim_final <- dissim_curr}
## incorporate new matrix into running average.
dissim_final <-
1/(d+1) * (d * dissim_final + dissim_curr)
}
## close workers if needed
if(parallelize == TRUE) {
stopCluster(cl)
}
return(dissim_final)
}
groupwiseDistanceHeatmap(
group_labels = group_labels,
dist_mat = sideref_res,
title = "Select Immune System Cell Types\nSIDEREF Relative Distances Heatmap",
do_hclust_axes = TRUE,
preset_levels = NULL,
do_numeric_x=TRUE,
do_numeric_y=FALSE
)
unique(meta_data_full$group_label)
unique(meta_data_full$cell_type)
unique(meta_data_full$cell_type) %>% sort()
set.seed(1)
library(here)
source(here("R/libraries.R"))
set.seed(1)
library(here)
source(here("R/libraries.R"))
load(here("output/tab_muris_sc/preproc_data/tab_muris_full.RData"),
verbose=TRUE)
### Set constants
cell_type_sample_size <- 100
n_variable_genes <- 3000
### B Cell, T Cell leukocyte extraction
cell_types_of_interest <- c("B cell", "natural killer cell", "leukocyte",
"bladder cell")
### For T.M. data, we want distinct celltype, tissue combinations.
### Note: This column is in fact already stored in the data as ``group_label``
meta_data_full <-
meta_data_full %>%
dplyr::mutate(cell_type_tissue = str_to_title(paste(cell_type, tissue, sep = ", ")))
cell_types_tissues_of_interest <-
meta_data_full %>%
dplyr::filter(cell_type %in% cell_types_of_interest) %>%
dplyr::pull(cell_type_tissue) %>% unique()
cells_sample_idx <- c()
### Sample one cell type at a time and append to ID list.
for(ct_tiss in cell_types_tissues_of_interest) {
cell_type_idx <-
which(meta_data_full$cell_type_tissue %in% ct_tiss)
cells_sample_idx <-
c(cells_sample_idx,
sample(cell_type_idx,
min(length(cell_type_idx), cell_type_sample_size)))
}
### Subset the data and metadata objects
data_subset <- data_full[ , cells_sample_idx]
meta_data_subset <- meta_data_full[cells_sample_idx, ]
### Seurat Package can yield us the 3,000 most variable genes for our group
###   and preprocess the data.
data_subset_seurat <-
CreateSeuratObject(data_subset, project = "SeuratProject", assay = "RNA")
### Getting the variable genes
data_subset_seurat <-
FindVariableFeatures(data_subset_seurat, nfeatures = n_variable_genes)
### Preprocessing the data
data_subset_seurat <-
NormalizeData(data_subset_seurat)
data_subset_seurat <-
ScaleData(data_subset_seurat)
data_subset_variable <- data_subset_seurat@assays$RNA@scale.data
### Confirm the dimensions look okay.
### Note: for several cell types, there are less cells than the subsample size.
dim(data_subset_variable)
## Now we will save the two objects as an RData that is available on the repo.
save(data_subset_variable, meta_data_subset,
file = here("output/tab_muris_sc/vignette_data/tm_sample.RData"))
load(here("output/tab_muris_sc/vignette_data/tm_sample.RData"),
verbose = TRUE)
### SIDEREF
### Note: source(here("R/libraries.R")) loads the function but we may also load it using:
source(here("R/SIDEREF.R"))
sideref_res <- SIDEREF(data_subset_variable)
source(here('R/relative_group_dist_comps.R'))
## Note: meta_data has a 'group_label' column containing cell type and tissue
## Note: meta_data column should have cells in the same order as the dist matrix.
### We may have an ordering that we prefer for the heatmap
group_labels <- as.character(meta_data_subset$group_label)
preset_levels <-
c(
unique(group_labels[grepl("Bladder Cell", group_labels)]),
unique(group_labels[grepl("Leukocyte", group_labels)]),
unique(group_labels[grepl("B Cell", group_labels)]),
unique(group_labels[grepl("Natural Killer", group_labels)])
)
groupwiseDistanceHeatmap(
group_labels = group_labels,
dist_mat = sideref_res,
title = "Select Immune System Cell Types\nSIDEREF Relative Distances Heatmap",
do_hclust_axes = FALSE,
preset_levels = preset_levels,
do_numeric_x=TRUE,
do_numeric_y=FALSE
)
unique(group_labels)
preset_levels <-
c(
unique(group_labels[grepl("Bladder Cell", group_labels)]),
unique(group_labels[grepl("Leukocyte", group_labels)]),
unique(group_labels[grepl("B Cell", group_labels)]),
unique(group_labels[grepl("Natural Killer", group_labels)])
)
### We may have an ordering that we prefer for the heatmap
group_labels <- as.character(meta_data_subset$group_label)
preset_levels <-
c(
unique(group_labels[grepl("Bladder Cell", group_labels)]),
unique(group_labels[grepl("Leukocyte", group_labels)]),
unique(group_labels[grepl("B Cell", group_labels)]),
unique(group_labels[grepl("Natural Killer", group_labels)])
)
groupwiseDistanceHeatmap(
group_labels = group_labels,
dist_mat = sideref_res,
title = "Select Immune System Cell Types\nSIDEREF Relative Distances Heatmap",
do_hclust_axes = FALSE,
preset_levels = preset_levels,
do_numeric_x=TRUE,
do_numeric_y=FALSE
)
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Thymus",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = TRUE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = TRUE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = TRUE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
leg_text_size = 8,
legend_title = "Cell Type, Tissue")
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.height = 1)
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.size = 1)
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.size = unit(1, 'cm'))
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.size = unit(0.5, 'cm'))
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.size = unit(0.75, 'cm'))
bipartiteNetworkGraph(
dist_mat = sideref_res,
group_labels = group_labels,
preset_levels = preset_levels,
source_groups = "Leukocyte, Kidney",
title = "Bladder Tissue Leukocytes, Source-Target Distances",
two_color_grad = FALSE,
## text-sizing options:
node_size = 7.5,
text_size = 3,
s_t_size = 4,
legend_title = "Cell Type, Tissue") +
theme(legend.key.size = unit(0.6, 'cm'))
